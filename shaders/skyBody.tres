[gd_resource type="ShaderMaterial" load_steps=17 format=2]

[sub_resource type="VisualShaderNodeColorOp" id=1]
operator = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=2]

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id=4]
uniform_name = "atmoPressure"
hint = 1
max = 10.0
default_value_enabled = true

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeClamp" id=16]

[sub_resource type="VisualShaderNodeMix" id=17]

[sub_resource type="VisualShaderNodeTexture" id=9]
source = 1

[sub_resource type="VisualShaderNodeVectorOp" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 3

[sub_resource type="VisualShaderNodeClamp" id=19]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=11]
source = 2

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorFunc" id=13]

[sub_resource type="VisualShaderNodeColorFunc" id=14]

[sub_resource type="VisualShader" id=15]
code = "shader_type canvas_item;
uniform float atmoPressure : hint_range(0, 10) = 0;



void vertex() {
// Output:0

}

void fragment() {
// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out5p0.xy);
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out3p0.xy, 0.0);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// ColorFunc:6
	vec3 n_out6p0;
	{
		vec3 c = n_out4p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		n_out6p0 = vec3(max2, max2, max2);
	}

// VectorOp:20
	vec3 n_in20p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out20p0 = n_out6p0 / n_in20p1;

// VectorClamp:21
	vec3 n_in21p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in21p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out21p0 = clamp(n_out20p0, n_in21p1, n_in21p2);

// ColorFunc:8
	vec3 n_out8p0;
	{
		vec3 c = n_out2p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		n_out8p0 = vec3(max2, max2, max2);
	}

// ColorOp:10
	vec3 n_out10p0 = abs(n_out21p0 - n_out8p0);

// ScalarUniform:15
	float n_out15p0 = atmoPressure;

// VectorCompose:12
	vec3 n_out12p0 = vec3(n_out15p0, n_out15p0, n_out15p0);

// VectorOp:13
	vec3 n_out13p0 = n_out10p0 * n_out12p0;

// VectorClamp:17
	vec3 n_in17p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in17p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out17p0 = clamp(n_out13p0, n_in17p1, n_in17p2);

// VectorMix:19
	vec3 n_out19p0 = mix(n_out4p0, n_out2p0, n_out17p0);

// Output:0
	COLOR.rgb = n_out19p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -800.25, 276.75 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1280, 200 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -860, 100 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( -1300, 160 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( -880, 360 )
nodes/fragment/5/node = SubResource( 12 )
nodes/fragment/5/position = Vector2( -1200, 420 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( -540, 420 )
nodes/fragment/8/node = SubResource( 14 )
nodes/fragment/8/position = Vector2( -540, 120 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -360, 760 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -860, 860 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 80, 820 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( -1420, 820 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( 640, 880 )
nodes/fragment/17/node = SubResource( 16 )
nodes/fragment/17/position = Vector2( 440, 640 )
nodes/fragment/19/node = SubResource( 17 )
nodes/fragment/19/position = Vector2( 360, 160 )
nodes/fragment/20/node = SubResource( 18 )
nodes/fragment/20/position = Vector2( -80, 480 )
nodes/fragment/21/node = SubResource( 19 )
nodes/fragment/21/position = Vector2( -720, 640 )
nodes/fragment/connections = PackedInt32Array( 5, 0, 4, 0, 3, 0, 2, 0, 4, 0, 6, 0, 2, 0, 8, 0, 8, 0, 10, 1, 10, 0, 13, 0, 12, 0, 13, 1, 15, 0, 12, 0, 15, 0, 12, 1, 15, 0, 12, 2, 13, 0, 16, 0, 4, 1, 0, 1, 13, 0, 17, 0, 4, 0, 19, 0, 2, 0, 19, 1, 17, 0, 19, 2, 19, 0, 0, 0, 6, 0, 20, 0, 20, 0, 21, 0, 21, 0, 10, 0 )

[resource]
shader = SubResource( 15 )
shader_param/atmoPressure = 1.0
